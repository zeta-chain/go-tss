package main

import (
	"crypto/ecdsa"
	"encoding/hex"
	"encoding/json"
	"flag"
	"fmt"
	"math"
	"os"
	"runtime"
	"sync/atomic"
	"time"

	"github.com/binance-chain/tss-lib/common"
	"github.com/binance-chain/tss-lib/ecdsa/keygen"
	"github.com/binance-chain/tss-lib/test"
	"github.com/binance-chain/tss-lib/tss"
	"github.com/ipfs/go-log"
	"github.com/pkg/errors"
	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

const libLogLevel = "error"

var (
	expectedIncomingMsgs,
	receivedIncomingMsgs,
	nMinus1 float64
	preParamTestData keygen.LocalPreParams
)

func init() {
	preDataJSON, _ := hex.DecodeString(preParamDataHex)
	if err := json.Unmarshal(preDataJSON, &preParamTestData); err != nil {
		panic(err)
	}
}

func usage() {
	if _, err := fmt.Fprintf(os.Stderr, "usage: tss-benchgen [-flag=value, ...] datadir\n"); err != nil {
		panic(err)
	}
	flag.PrintDefaults()
	os.Exit(2)
}

func main() {
	prt := message.NewPrinter(language.English)
	var (
		quorum  = flag.Int("q", 2, "the signing quorum (t+1)")
		parties = flag.Int("n", 20, "the number of party shares to generate (n)")
		procs   = flag.Int("procs", runtime.NumCPU(), "the number of max go procs (threads) to use")
	)
	flag.Usage = usage
	if flag.Parse(); !flag.Parsed() {
		usage()
		os.Exit(1)
	}
	if *parties <= 0 || *quorum <= 1 || *parties < *quorum {
		fmt.Println("Error: n must be greater than 0, q must be greater than 1, q cannot be less than n.")
		os.Exit(1)
	}
	if flag.NArg() < 1 {
		usage()
		os.Exit(1)
	}
	dir := flag.Args()[0]
	if _, err := os.Stat(dir); !os.IsNotExist(err) {
		fmt.Printf("Error: `%s` already exists, delete it first and this tool will create it.\n", dir)
		os.Exit(1)
	}
	if err := os.Mkdir(dir, os.ModePerm); err != nil {
		panic(err)
	}

	fmt.Println("ECDSA/GG20 Benchmark Tool - KeyGen")
	fmt.Println("----------------------------------")
	fmt.Printf("Max go procs (threads): %d\n", *procs)
	fmt.Printf("Generating %d shares, quorum=%d...\n", *parties, *quorum)
	fmt.Println("No network latency.")
	fmt.Println("----------------------------------")

	runtime.GOMAXPROCS(*procs)
	start := time.Now()
	runKeyGen(dir, (*quorum)-1, *parties)
	elapsed := time.Since(start)

	fmt.Printf("Done. %d shares written to `%s`.\n", *parties, dir)
	_, _ = prt.Printf("Finished in %d ms.\n", elapsed.Milliseconds())
	os.Exit(0)
}

func setUp(level string) {
	if err := log.SetLogLevel("tss-lib", level); err != nil {
		panic(err)
	}
}

func setUpProgress(n int) {
	nMinus1 = float64(n) - 1
	expectedIncomingMsgs = (3 * nMinus1) + nMinus1
	receivedIncomingMsgs = -1
}

func incrementAndDisplayProgress() {
	var progress float64
	receivedIncomingMsgs++
	if receivedIncomingMsgs > 0 {
		progress = math.Min(1, receivedIncomingMsgs/expectedIncomingMsgs)
	} else {
		progress = 0
	}
	fmt.Printf("\rProgress: %d%%... ", int(progress*100))
}

func runKeyGen(dir string, t, n int) {
	setUp(libLogLevel)
	setUpProgress(n)

	fmt.Printf("Starting... ")

	pIDs := tss.GenerateTestPartyIDs(n)

	p2pCtx := tss.NewPeerContext(pIDs)
	parties := make([]*keygen.LocalParty, 0, len(pIDs))

	errCh := make(chan *tss.Error, len(pIDs))
	outCh := make(chan tss.Message, len(pIDs))
	endCh := make(chan keygen.LocalPartySaveData, len(pIDs))

	updater := test.SharedPartyUpdater

	// init the parties
	for i := 0; i < len(pIDs); i++ {
		params := tss.NewParameters(p2pCtx, pIDs[i], len(pIDs), t)
		params.UNSAFE_setKGIgnoreH1H2Dupes(true)
		P := keygen.NewLocalParty(params, outCh, endCh, preParamTestData).(*keygen.LocalParty)
		parties = append(parties, P)
		go func(P *keygen.LocalParty) {
			if err := P.Start(); err != nil {
				errCh <- err
			}
		}(P)
	}

	// PHASE: keygen
	var ended int32
outer:
	for {
		select {
		case err := <-errCh:
			common.Logger.Errorf("Error: %s", err)
			panic(err)

		case msg := <-outCh:
			dest := msg.GetTo()
			if dest == nil { // broadcast!
				for _, P := range parties {
					if P.PartyID().Index == msg.GetFrom().Index {
						continue
					}
					go updater(P, msg, errCh)
				}
			} else { // point-to-point!
				if dest[0].Index == msg.GetFrom().Index {
					panic(fmt.Errorf("party %d tried to send a message to itself (%d)", dest[0].Index, msg.GetFrom().Index))
				}
				go updater(parties[dest[0].Index], msg, errCh)
			}
			incrementAndDisplayProgress()

		case save := <-endCh:
			// SAVE a test fixture file for this P (if it doesn't already exist)
			// .. here comes a workaround to recover this party's index (it was removed from save data)
			index, err := save.OriginalIndex()
			if err != nil {
				panic(err)
			}
			tryWriteKeyGenDataFile(dir, index, save)

			atomic.AddInt32(&ended, 1)
			if atomic.LoadInt32(&ended) == int32(len(pIDs)) {
				// build ecdsa key pair
				pkX, pkY := save.ECDSAPub.X(), save.ECDSAPub.Y()
				pk := ecdsa.PublicKey{
					Curve: tss.EC(),
					X:     pkX,
					Y:     pkY,
				}
				sk := ecdsa.PrivateKey{
					PublicKey: pk,
				}
				// test pub key, should be on curve and match pkX, pkY
				if !sk.IsOnCurve(pkX, pkY) {
					panic("public key must be on curve, but it was not")
				}
				break outer
			}
		}
	}
}

func tryWriteKeyGenDataFile(dir string, index int, data keygen.LocalPartySaveData) {
	fixtureFileName := makeKeyGenDataFilePath(dir, index)

	// fixture file does not already exist?
	// if it does, we won't re-create it here
	fi, err := os.Stat(fixtureFileName)
	if !(err == nil && fi != nil && !fi.IsDir()) {
		fd, err := os.OpenFile(fixtureFileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0o600)
		if err != nil {
			panic(errors.Wrapf(err, "unable to open fixture file %s for writing", fixtureFileName))
		}
		bz, err := json.Marshal(&data)
		if err != nil {
			panic(errors.Wrapf(err, "unable to marshal save data for fixture file %s", fixtureFileName))
		}
		_, err = fd.Write(bz)
		if err != nil {
			panic(errors.Wrapf(err, "unable to write to fixture file %s", fixtureFileName))
		}
		common.Logger.Debugf("Saved a test fixture file for party %d: %s\n", index, fixtureFileName)
	} else {
		fmt.Printf("\nFixture file already exists for party %d; not re-creating: %s\n", index, fixtureFileName)
	}
	//
}

func makeKeyGenDataFilePath(dir string, partyIndex int) string {
	return fmt.Sprintf("%s/keygen_data_%d.json", dir, partyIndex)
}

// ----- //

const (
	// taken from line 1 of `test_data/preParam_test.data` in this repo
	preParamDataHex = ""
)
